services:
  django_app:
    image: django_app
    command: ./entrypoint.sh
    container_name: django_app
    ports:
      - "8000:8000"
    environment:
      - CODE_RESULT_CHANNEL=code_results
      - CODE_EXEC_TASK_CHANNEL=code_exec_tasks
      - GRAPH_MESSAGE_UPDATE_CHANNEL=graph:message:update
      - GRAPH_MESSAGES_CHANNEL=graph:messages
      - SESSION_STATUS_CHANNEL=sessions:session_status
      - MEMORY_UPDATE_CHANNEL=memory:update

      - DEBUG=True
      - SECRET_KEY=example-5$8!dbhafy9bp!gf
      - ALLOWED_HOSTS=0.0.0.0, 127.0.0.1, localhost, django_app
    
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      - DB_HOST_NAME=crewdb
      - DB_PORT=5432
      - DB_USER=postgres
      - POSTGRES_PASSWORD=admin
      - DB_NAME=crew 

      - GUNICORN_WORKERS=1
      - GUNICORN_THREADS=4
    volumes:
      - crew_config:/home/user/root/app/env_config

    networks:
      - backend-network
    depends_on:
      crewdb:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ht/"]
      interval: 30s
      timeout: 10s
      retries: 5

  realtime:
    container_name: realtime
    image: realtime
    ports:
    - "8050:8050"
    environment:
      - KNOWLEDGE_SEARCH_GET_CHANNEL=knowledge:search:get
      - KNOWLEDGE_SEARCH_RESPONSE_CHANNEL=knowledge:search:response
      - REALTIME_AGENTS_SCHEMA_CHANNEL=realtime_agents:schema
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MANAGER_HOST=manager_container
      - MANAGER_PORT=8000
      - DB_NAME=crew
      - DB_HOST_NAME=crewdb
      - DB_REALTIME_PASSWORD=realtime_password
      - DB_REALTIME_USER=realtime_user
      - DB_PORT=5432
    networks:
      - backend-network
    depends_on:
      crewdb:
        condition: service_healthy
      manager:
        condition: service_started
      redis:
        condition: service_started
      knowledge:
        condition: service_started
      django_app:
        condition: service_healthy

  manager:
    image: manager
    container_name: manager_container
    ports:
      - "8001:8000"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REBUILD_CREW=FALSE
      - PULL_TOOL=FALSE
      - MANAGER_PORT=8000
      - DB_NAME=crew
      - DB_HOST_NAME=crewdb
      - DB_PORT=5432
      - DB_MANAGER_USER=manager_user
      - DB_MANAGER_PASSWORD=manager_password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started      


  crewdb:
    image: crewdb
    container_name: crewdb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crew
      - POSTGRES_PASSWORD=admin
      - PGDATA=/var/lib/postgresql/data/pgdata
      - DB_MANAGER_USER=manager_user
      - DB_MANAGER_PASSWORD=manager_password

      - DB_KNOWLEDGE_USER=knowledge_user
      - DB_KNOWLEDGE_PASSWORD=knowledge_password

      - DB_REALTIME_USER=realtime_user
      - DB_REALTIME_PASSWORD=realtime_password

      - DB_CREW_USER=crew_user
      - DB_CREW_PASSWORD=crew_password
    volumes:
      - crew_pgdata:/var/lib/postgresql/data/pgdata
    networks:
      - backend-network
    healthcheck:
      test: |
        bash -c '
          # First check if postgres is ready
          pg_isready -U postgres || exit 1
          
          # Then check if users have been created
          /usr/local/bin/custom-docker-entrypoint.sh healthcheck-users
        '
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 15s

  redis:
    image: redis
    container_name: redis
    networks:
      - backend-network
    ports:
      - "6379:6379"

  crew:
    image: crew
    container_name: crew
    ports:
      - "8002:8000"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MANAGER_HOST=manager_container
      - MANAGER_PORT=8000
      - HAYSTACK_TELEMETRY_ENABLED=False
      - ANONYMIZED_TELEMETRY=False
      - EC_TELEMETRY=False
      - MONITORING_MODE=local
      - PROCESS_REDIS_HOST=redis
      - DB_NAME=crew
      - DB_HOST_NAME=crewdb
      - DB_CREW_PASSWORD=crew_password
      - DB_CREW_USER=crew_user
      - DB_PORT=5432
      - SESSION_STATUS_CHANNEL=sessions:session_status
      - CODE_RESULT_CHANNEL=code_results
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - /usr/bin/docker:/usr/bin/docker
      - crew_config:/home/user/root/app/env_config/
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    image: frontend
    container_name: frontend
    ports:
      - "4200:80"
    networks:
      - frontend-network
    volumes:
      - ./frontend-config/frontend-config.json:/usr/share/nginx/html/config.json:ro

  sandbox:
    image: sandbox
    container_name: sandbox
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CODE_RESULT_CHANNEL=code_results
      - CODE_EXEC_TASK_CHANNEL=code_exec_tasks
      - BASE_VENV_PATH=/home/user/root/app/venvs/
      - OUTPUT_PATH=/home/user/root/app/executions/
    env_file:
      - .env
    volumes:
      - sandbox_venvs:/home/user/root/app/venvs/
      - sandbox_executions:/home/user/root/app/executions/
      - ${CREW_SAVEFILES_PATH}:/home/user/root/app/savefiles/
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      - redis

  knowledge:
    image: knowledge
    container_name: knowledge
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KNOWLEDGE_SOURCES_CHANNEL=knowledge_sources
      - KNOWLEDGE_SEARCH_GET_CHANNEL=knowledge:search:get
      - KNOWLEDGE_SEARCH_RESPONSE_CHANNEL=knowledge:search:response
      - DB_NAME=crew
      - DB_KNOWLEDGE_USER=knowledge_user
      - DB_KNOWLEDGE_PASSWORD=knowledge_password
      - DB_PORT=5432
      - DB_HOST_NAME=crewdb
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started


volumes:
  sandbox_venvs:
    external: true
  sandbox_executions:
    external: true
  crew_pgdata:
    external: true
  crew_config:
    external: true

networks:
  backend-network:
    driver: bridge

  frontend-network:
    driver: bridge
